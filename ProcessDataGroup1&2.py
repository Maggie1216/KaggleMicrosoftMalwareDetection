# -*- coding: utf-8 -*-
"""
Created on Sun Feb 17 12:10:01 2019

@author: luxiaotong
"""
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

#LoadData
train_df = pd.read_csv('train.csv', iterator = True)
test_df = pd.read_csv('test.csv',iterator = True)
#Approach1: Chunks, All Data
data=pd.DataFrame()
i=0
while i<8921483:#RowCount
    now_df=train_df.get_chunk(400000)
    data=pd.concat([data,now_df])
    i+=400000
#Approach2(Current): Load samples
train_sample=train_df.get_chunk(200000)

#GetColumnsFunction
def get_columns(group):
    column_group={
   'ProductName':4,
   'EngineVersion':4,
   'AppVersion':4,
   'AvSigVersion':4,
   'IsBeta':1,
   'RtpStateBitfield':4,
   'IsSxsPassiveMode':1,
   'DefaultBrowsersIdentifier':4,
   'AVProductStatesIdentifier':4,
   'AVProductsInstalled':4,
   'AVProductsEnabled':4,
   'HasTpm':1,
   'CountryIdentifier':4,
   'CityIdentifier':4,
   'OrganizationIdentifier':4,
   'GeoNameIdentifier':4,
   'LocaleEnglishNameIdentifier':4,
   'Platform':4,
   'Processor':4,
   'OsVer':4,
   'OsBuild':4,
   'OsSuite':4,
   'OsPlatformSubRelease':4,
   'OsBuildLab':4,
   'SkuEdition':4,
   'IsProtected':1,
   'AutoSampleOptIn':1,
   'PuaMode':1,
   'SMode':1,
   'IeVerIdentifier':4,
   'SmartScreen':4,
   'Firewall':1,
   'UacLuaenable':1,
   'Census_MDC2FormFactor':3,
   'Census_DeviceFamily':3,
   'Census_OEMNameIdentifier':3,
   'Census_OEMModelIdentifier':3,
   'Census_ProcessorCoreCount':3,
   'Census_ProcessorManufacturerIdentifier':3,
   'Census_ProcessorModelIdentifier':2,
   'Census_ProcessorClass':3,
   'Census_PrimaryDiskTotalCapacity':2,
   'Census_PrimaryDiskTypeName':3,
   'Census_SystemVolumeTotalCapacity':2,
   'Census_HasOpticalDiskDrive':1,
   'Census_TotalPhysicalRAM':3,
   'Census_ChassisTypeName':3,
   'Census_InternalPrimaryDiagonalDisplaySizeInInches':2,
   'Census_InternalPrimaryDisplayResolutionHorizontal':2,
   'Census_InternalPrimaryDisplayResolutionVertical':2,
   'Census_PowerPlatformRoleName':3,
   'Census_InternalBatteryType':3,
   'Census_InternalBatteryNumberOfCharges':2,
   'Census_OSVersion':2,
   'Census_OSArchitecture':3,
   'Census_OSBranch':3,
   'Census_OSBuildNumber':3,
   'Census_OSBuildRevision':3,
   'Census_OSEdition':3,
   'Census_OSSkuName':3,
   'Census_OSInstallTypeName':3,
   'Census_OSInstallLanguageIdentifier':3,
   'Census_OSUILocaleIdentifier':3,
   'Census_OSWUAutoUpdateOptionsName':3,
   'Census_IsPortableOperatingSystem':1,
   'Census_GenuineStateName':3,
   'Census_ActivationChannel':3,
   'Census_IsFlightingInternal':1,
   'Census_IsFlightsDisabled':1,
   'Census_FlightRing':3,
   'Census_ThresholdOptIn':1,
   'Census_FirmwareManufacturerIdentifier':2,
   'Census_FirmwareVersionIdentifier':2,
   'Census_IsSecureBootEnabled':1,
   'Census_IsWIMBootEnabled':1,
   'Census_IsVirtualDevice':1,
   'Census_IsTouchEnabled':1,
   'Census_IsPenCapable':1,
   'Census_IsAlwaysOnAlwaysConnectedCapable':1,
   'Wdft_IsGamer':1,
   'Wdft_RegionIdentifier':4
    }
    lst=[]
    for i,v in column_group.items():
        if v==group:
            lst.append(i)
    return lst
#NaPercentageFunction
def na_percent(df,columns):
    r=df.shape[0]
    na=df[columns].isnull().sum()
    return na/r
        
#Group1: Binary values
    sample_group1=train_sample[get_columns(1)]
    #na
    na_percent(sample_group1,get_columns(1))
    #distribution
    def get_binary_dis(df,columns):
        d={}
        for c in columns:
            dis=pd.value_counts(df[c].tolist())
            temp={c:dict(dis)}
            d.update(temp)
        return d
    get_binary_dis(sample_group1,get_columns(1))
    #WeirdValues
    sample_group1['PuaMode']=sample_group1['PuaMode'].replace('on',1)#'on' to 1
    sample_group1.loc[sample_group1['UacLuaenable']>1,'UacLuaenable']=np.nan#>1 equals to na

#Group2: Numeric values
    sample_group2=train_sample[get_columns(2)]
    #na
    na_percent(sample_group2,get_columns(2))
    #distrubution
    def get_numeric_dis(df,columns):
        for c in columns:
            try:
                plt.figure()
                plt.subplot(121)
                plt.title(c)
                plt.hist(np.array(sample_group2[c].dropna()),bins=50)
                plt.subplot(122)
                plt.boxplot(np.array(sample_group2[c].dropna()))
            except Exception as e:
                print('column '+c+' error, message: '+str(e))
    #WeirdValues
    newlst=[]
    for i in map(lambda x: x.replace('.',''),sample_group2['Census_OSVersion'].tolist()):
        newlst.append(i)
    sample_group2['Census_OSVersion']=newlst
    sample_group2['Census_OSVersion']=sample_group2['Census_OSVersion'].astype(float)
    

            
    
    
        
    

    
    
    
    