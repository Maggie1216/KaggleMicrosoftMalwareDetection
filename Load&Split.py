# -*- coding: utf-8 -*-
"""
Created on Thu Feb 14 15:19:41 2019

@author: Yufeng Zhang
"""

import pandas as pd
import numpy as np
column_group={
    'ProductName ':4,
    'EngineVersion ':4,
    'AppVersion ':4,
    'AvSigVersion ':4,
    'IsBeta ':1,
    'RtpStateBitfield ':4,
    'IsSxsPassiveMode ':1,
    'DefaultBrowsersIdentifier ':4,
    'AVProductStatesIdentifier ':4,
    'AVProductsInstalled ':4,
    'AVProductsEnabled ':4,
    'HasTpm ':1,
    'CountryIdentifier ':4,
    'CityIdentifier ':4,
    'OrganizationIdentifier ':4,
    'GeoNameIdentifier ':4,
    'LocaleEnglishNameIdentifier ':4,
    'Platform ':4,
    'Processor ':4,
    'OsVer ':4,
    'OsBuild ':4,
    'OsSuite ':4,
    'OsPlatformSubRelease ':4,
    'OsBuildLab ':4,
    'SkuEdition ':4,
    'IsProtected ':1,
    'AutoSampleOptIn ':1,
    'PuaMode ':1,
    'SMode ':1,
    'IeVerIdentifier ':4,
    'SmartScreen ':4,
    'Firewall ':1,
    'UacLuaenable ':1,
    'Census_MDC2FormFactor ':3,
    'Census_DeviceFamily ':3,
    'Census_OEMNameIdentifier ':3,
    'Census_OEMModelIdentifier ':3,
    'Census_ProcessorCoreCount ':3,
    'Census_ProcessorManufacturerIdentifier ':3,
    'Census_ProcessorModelIdentifier ':2,
    'Census_ProcessorClass ':3,
    'Census_PrimaryDiskTotalCapacity ':2,
    'Census_PrimaryDiskTypeName ':3,
    'Census_SystemVolumeTotalCapacity ':2,
    'Census_HasOpticalDiskDrive ':1,
    'Census_TotalPhysicalRAM ':3,
    'Census_ChassisTypeName ':3,
    'Census_InternalPrimaryDiagonalDisplaySizeInInches ':2,
    'Census_InternalPrimaryDisplayResolutionHorizontal ':2,
    'Census_InternalPrimaryDisplayResolutionVertical ':2,
    'Census_PowerPlatformRoleName ':3,
    'Census_InternalBatteryType ':3,
    'Census_InternalBatteryNumberOfCharges ':2,
    'Census_OSVersion ':2,
    'Census_OSArchitecture ':3,
    'Census_OSBranch ':3,
    'Census_OSBuildNumber ':3,
    'Census_OSBuildRevision ':3,
    'Census_OSEdition ':3,
    'Census_OSSkuName ':3,
    'Census_OSInstallTypeName ':3,
    'Census_OSInstallLanguageIdentifier ':3,
    'Census_OSUILocaleIdentifier ':3,
    'Census_OSWUAutoUpdateOptionsName ':3,
    'Census_IsPortableOperatingSystem ':1,
    'Census_GenuineStateName ':3,
    'Census_ActivationChannel ':3,
    'Census_IsFlightingInternal ':1,
    'Census_IsFlightsDisabled ':1,
    'Census_FlightRing ':3,
    'Census_ThresholdOptIn ':1,
    'Census_FirmwareManufacturerIdentifier ':2,
    'Census_FirmwareVersionIdentifier ':2,
    'Census_IsSecureBootEnabled ':1,
    'Census_IsWIMBootEnabled ':1,
    'Census_IsVirtualDevice ':1,
    'Census_IsTouchEnabled ':1,
    'Census_IsPenCapable ':1,
    'Census_IsAlwaysOnAlwaysConnectedCapable ':1,
    'Wdft_IsGamer ':1,
    'Wdft_RegionIdentifier ':4
    }
column_group = {key[:-1]:value for key,value in column_group.items()}
group_df = pd.DataFrame(column_group,index=[0]).T
group = [pd.DataFrame(),pd.DataFrame(),pd.DataFrame(),pd.DataFrame()]
k = 0
for i,j in group_df.groupby(0):
    group[k] = j
    k += 1


def save_group(k):
    chunks = pd.read_csv('D:\\kaggle\\train.csv',chunksize=10000)
    num = 0
    features_num = group[k].shape[0]
    col = group[k].index.values.tolist()
    value_group = np.empty([9000000,features_num],dtype=object)
    record = 0
    for chunk in chunks:
        samples_num = chunk.shape[0]
        record += samples_num
        value_group[num:num+samples_num] = chunk[col].values
        num += samples_num
    return value_group,record

value_group1,record = save_group(0)
value_df1 = pd.DataFrame(value_group1[:record],columns = group[0].index.values.tolist())
value_df1.to_hdf('D:\\pycodes\\kaggle\\microsoft-malware-prediction\\value_group1.h5',key='g1')

value_group2,record = save_group(1)
value_df2 = pd.DataFrame(value_group2[:record],columns = group[1].index.values.tolist())
value_df2.to_hdf('D:\\pycodes\\kaggle\\microsoft-malware-prediction\\value_group2.h5',key='g2')

value_group3,record = save_group(2)
value_df3 = pd.DataFrame(value_group3[:record],columns = group[2].index.values.tolist())
value_df3.to_hdf('D:\\pycodes\\kaggle\\microsoft-malware-prediction\\value_group3.h5',key='g3')

value_group4,record = save_group(3)
value_df4 = pd.DataFrame(value_group4[:record],columns = group[3].index.values.tolist())
value_df4.to_hdf('D:\\pycodes\\kaggle\\microsoft-malware-prediction\\value_group4.h5',key='g4')



a = pd.read_hdf('D:\\pycodes\\kaggle\\microsoft-malware-prediction\\value_group1.h5',key='g1')




